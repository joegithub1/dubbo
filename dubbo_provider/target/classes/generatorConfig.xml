<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" >
<generatorConfiguration>
	<!-- maven仓库中的jar -->
	<classPathEntry location="E:\mavenrepository\mysql\mysql-connector-java\5.1.18\mysql-connector-java-5.1.18.jar"/>
	<!-- 
	    context:生成一组对象的环境 
	    id:必选，上下文id，用于在生成错误时提示
	    defaultModelType:指定生成对象的样式
	        1，conditional：类似hierarchical；
	        2，flat：所有内容（主键，blob）等全部生成在一个对象中；
	        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
	    targetRuntime:
	        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
	        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
	    introspectedColumnImpl：类全限定名，用于扩展MBG
	-->
	<context id="context">
		<!-- 数据库驱动 -->
		<jdbcConnection driverClass="com.mysql.jdbc.Driver" userId="root" password="root"
			connectionURL="jdbc:mysql://127.0.0.1:3306/imooc">
		
		</jdbcConnection>
	    <!-- java类型处理器 
	        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
	        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； 
	    -->		
		<javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
			<!-- 
	            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
	            false：默认,
	                scale>0;length>18：使用BigDecimal;
	                scale=0;length[10,18]：使用Long；
	                scale=0;length[5,9]：使用Integer；
	                scale=0;length<5：使用Short；
	         -->
			<property name="forceBigDecimals" value="false"/>
		</javaTypeResolver>
		<!-- 生成实体类 -->
		<!-- E:\Workspaces\MyEclipse2017CI10\mydubboDemo01\dubbo\dubbo_api\src\main\java -->
		<!-- E:\Workspaces\MyEclipse2017CI10\mydubboDemo01\dubbo_api\src\main\java -->
		<javaModelGenerator targetPackage="com.dubbo.demo.model" 
			targetProject="E:\Workspaces\MyEclipse2017CI10\mydubboDemo01\dubbo\dubbo_api\src\main\java">
			 <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
			 <!--  enableSubPackages:是否让schema作为包的后缀-->
       	 	<property name="enableSubPackages" value="false"/>
		</javaModelGenerator>
		<!-- 生成SQL map的XML文件生成器，
		        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
		            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
		        targetPackage/targetProject:同javaModelGenerator
     	-->
     	<!-- 
     	E:\Workspaces\MyEclipse2017CI10\mydubboDemo01\dubbo\dubbo_provider\src\main\resources
     	E:\Workspaces\MyEclipse2017CI10\mydubboDemo01\dubbo_provider Maven Webapp\src\main\resources
     	 -->
     	
		<sqlMapGenerator targetPackage="mybatis.mapper" 
			targetProject="E:\Workspaces\MyEclipse2017CI10\mydubboDemo01\dubbo\dubbo_provider\src\main\resources">
			<!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
			<!--  enableSubPackages:是否让schema作为包的后缀-->
       	 	<property name="enableSubPackages" value="false"/>
		</sqlMapGenerator>
	    <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 
	        targetPackage/targetProject:同javaModelGenerator
	        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
	            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
	            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
	            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
	        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
	    -->
		<!-- E:\Workspaces\MyEclipse2017CI10\mydubboDemo01\dubbo_provider Maven Webapp\src\main\java -->
		<!-- E:\Workspaces\MyEclipse2017CI10\mydubboDemo01\dubbo\dubbo_provider\src\main\java -->
		<javaClientGenerator targetPackage="com.dubbo.demo.mapper" type="XMLMAPPER" 
			targetProject="E:\Workspaces\MyEclipse2017CI10\mydubboDemo01\dubbo\dubbo_provider\src\main\java">
		
		</javaClientGenerator>
		
		<!-- generatedKey用于生成生成主键的方法，
		            如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
		            column:主键的列名；
		            sqlStatement：要生成的selectKey语句，有以下可选项：
		                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
		                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
		                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
		                Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
		                HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()
		                Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
		                MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
		                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
		                SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY
		                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性
		        <generatedKey column="" sqlStatement=""/>
         -->			
		<table tableName="t_department">
			<generatedKey column="depa_id" sqlStatement="mysql" identity="true" type="post"/>
		</table>
		<!-- <table tableName=""></table> -->
	</context>
</generatorConfiguration>
